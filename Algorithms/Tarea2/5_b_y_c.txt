\textbf{b)}

Lo que hace la función \textit{bbRec} es buscar un elemento en el subarreglo $A[izq...der]$, donde $izq$ y $der$ son números que recibe como parámetros. Se demostrará la correctitud de la función \textit{bbRec} por inducción.

\underline{Caso base:} Se considerarán dos casos base: uno en el que $x$ sí está y otro en el que $x$ no está. Se considerará que el caso base es cuando $A[izq...der]$ tiene tamaño 1, es decir, cuando $izq = der$.

\textbf{Subcaso 1:} $x$ sí está en el subarreglo. Como el subarreglo $A[izq...der]$ tiene tamaño 1 y se está suponiendo que $x$ sí está ahí, entonces necesariamente $x = A[izq]$. Como $izq = der$, entonces $mitad$ es igual a $(izq+der)/2=(2izq)/2 = izq$. Como $izq = mitad$ entonces $x$ es igual a $A[mitad]$ y la comprobación de la línea 5 es verdadera; lo que significa que devuelve el índice $mitad = izq$, y en este caso se devuelve el resultado correcto.

\textbf{Subcaso 2:} $x$ no está en el subarreglo. Por lo descrito en el subcaso 1, se está analizando solamente un suarreglo de tamaño 1, (al elemento $A[mitad]$). Como se está suponiendo que $x$ no está en $A[izq...der]$ y este subarreglo solo tiene un elemento, entonces se tiene que $x \neq A[mitad]$.

\textbf{Subcaso 2.1:} Si $x < A[mitad]$ se hace una llamada recursiva a la función con parámetros $izq$ y $mitad-1$; o dicho de otra forma, en la siguiente llamada el valor de $der$ será $mitad-1$, mientras que $izq$ no cambia. Como se tenía (en el caso de tamaño 1) que $izq = der = mitad$, entonces en la siguiente llamada $der$ será igual a $izq-1$ y se hará verdadera la condición de la línea 2. Por lo tanto, se devolverá -1, que significa que $x$ no está, y en este caso se devuelve el resultado correcto.

\textbf{Subcaso 2.2:} Si $x > A[mitad]$ se hace una llamada recursiva con parámetros $mitad+1$ y $der$. Se tendrá entonces que $izq$ será igual a $der+1$ y se cumplirá la condición de la línea 2. Por lo tanto se devolverá -1 y entonces el resultado es correcto.

\underline{H.I.} Sea $n = der-izq+1$ (el tamaño del subarreglo). Supongamos que la función $bbRec$ resuelve el problema correctamente para un subarreglo de tamaño menor o igual a $n/2$. Se demostrará que $bbRec$ también devuelve el resultado correcto para un subarreglo de tamaño $n$.

Primero observe lo siguiente: $mitad-1-izq+1 = (izq+der)/2-izq = izq/2+der/2-izq = der/2-izq/2 = (der-izq)/2 \leq n/2$. La última desigualdad se sigue de que $der-izq+1 = n \therefore (der-izq+1)/2 = n/2 \therefore (der-izq)/2 \leq n/2$. Con esto se tiene que el subarreglo $A[izq...mitad-1]$, donde se hace la llamada recursiva de la línea 8, tiene tamaño menor o igual a $n/2$. Haciendo un análisis similar se obtiene que el subarrelgo $A[mitad+1...der]$, donde se hace la búsqueda recursivamente en la línea 10, tiene tamaño menor o igual a $n/2$.

Se van a considerar tres subcasos:

\textbf{Subcaso 1:} $x$ es igual a $A[mitad]$. En este caso, la condición de la línea 5 se cumple y se devuelve $mitad$, por lo tanto para este caso es correcto.

\textbf{Subcaso 2:} $x$ es menor a $A[mitad]$. En este caso se cumple la condición de la línea 7 y se devuelve el resultado de aplicar recursivamente la función bbRec al subarreglo $A[izq...mitad-1]$ (línea 8). Si $x$ está en $A[izq...der]$, como el arreglo $A$ está ordenado entonces, $x$ está en $A[izq...mitad-1]$ y por la H.I. $bbRec(A, x, izq, mitad-1)$ devuelve el índice donde se encuentra $x$. Si $x$ no está en $A$, por H.I., $bbRec(A, x, izq, mitad-1)$ devuelve -1.

\textbf{Subcaso 3:} Si $x$ es mayor a $A[mitad]$ se hace un análisis similar al caso anterior, pero con $bbRec(A, x, mitad+1, der)$.

La primera llamada a la función se hace en la función $busquedaBinaria$ desde el índice 0 hasta el índice $len(A)-1$, es decir, todo el arreglo. Por lo tanto, la función $busquedaBinaria$ devuelve el resultado correcto de buscar $x$ en todo el arreglo $A$.\\

\textbf{c)}

Inicialmente, el espacio de búsqueda es $len(A)-1-0+1 = len(A)$, es decir, el tamaño del arreglo. Ya se analizó que si $n = der-izq+1$, entonces $der-(mitad+1)+1 \leq n/2$ y $(mitad-1)-izq \leq n/2$. Esto quiere decir que en cada llamada recursiva se reduce el espacio de búsqueda a la mitad hasta que se encuentra a $x$ o el tamaño del espacio de búsqueda se hace 0. Por lo tanto, la complejidad del algoritmo es $O(\log n)$, donde $n$ es el tamaño de $A$.
